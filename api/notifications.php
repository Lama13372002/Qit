<?php
// –û—Ç–∫–ª—é—á–∞–µ–º –≤—ã–≤–æ–¥ –æ—à–∏–±–æ–∫ –≤ –±—Ä–∞—É–∑–µ—Ä (–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ª–æ–≥)
error_reporting(E_ALL);
ini_set('display_errors', 0);
ini_set('log_errors', 1);

// –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –Ω–µ—Ç –≤—ã–≤–æ–¥–∞ –ø–µ—Ä–µ–¥ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
ob_start();

header('Content-Type: application/json');
header('Access-Control-Allow-Origin: *');
header('Access-Control-Allow-Methods: GET, POST, PUT, DELETE');
header('Access-Control-Allow-Headers: Content-Type');

require_once '../config/database.php';

// –û–±—Ä–∞–±–æ—Ç–∫–∞ preflight –∑–∞–ø—Ä–æ—Å–æ–≤
if ($_SERVER['REQUEST_METHOD'] === 'OPTIONS') {
    http_response_code(200);
    exit();
}

try {
    $conn = getDBConnection();
    $method = $_SERVER['REQUEST_METHOD'];
    $input = json_decode(file_get_contents('php://input'), true);

    switch ($method) {
        case 'GET':
            handleGet($conn);
            break;
        case 'POST':
            handlePost($conn, $input);
            break;
        case 'PUT':
            handlePut($conn, $input);
            break;
        case 'DELETE':
            handleDelete($conn, $input);
            break;
        default:
            http_response_code(405);
            echo json_encode(['error' => 'Method not allowed']);
    }
} catch (Exception $e) {
    http_response_code(500);
    echo json_encode([
        'success' => false,
        'error' => $e->getMessage(),
        'file' => basename(__FILE__),
        'line' => $e->getLine()
    ]);
}

function handleGet($conn) {
    $action = $_GET['action'] ?? 'list';

    switch ($action) {
        case 'list':
            // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            $limit = (int)($_GET['limit'] ?? 50);
            $offset = (int)($_GET['offset'] ?? 0);
            $type_filter = $_GET['type'] ?? '';
            $unread_only = isset($_GET['unread_only']) && $_GET['unread_only'] === 'true';

            $where_conditions = [];
            $params = [];

            if (!empty($type_filter)) {
                $where_conditions[] = "n.type = ?";
                $params[] = $type_filter;
            }

            if ($unread_only) {
                $where_conditions[] = "n.is_read = 0";
            }

            $where_clause = empty($where_conditions) ? '' : 'WHERE ' . implode(' AND ', $where_conditions);

            $stmt = $conn->prepare("
                SELECT n.*, t.table_number,
                       CASE
                           WHEN n.type = 'call_waiter' THEN 'üôã‚Äç‚ôÇÔ∏è Call Waiter'
                           WHEN n.type = 'make_order' THEN 'üìù Make Order'
                           WHEN n.type = 'request_bill_card' THEN 'üí≥ Request Bill (Card)'
                           WHEN n.type = 'request_bill_cash' THEN 'üíµ Request Bill (Cash)'
                           WHEN n.type = 'call_shisha' THEN 'üí® Call Shisha Master'
                           WHEN n.type = 'change_coal' THEN 'üî• Change Coal'
                           ELSE n.type
                       END as type_display
                FROM notifications n
                INNER JOIN tables t ON n.table_id = t.id
                $where_clause
                ORDER BY n.created_at DESC
                LIMIT ? OFFSET ?
            ");

            $params[] = $limit;
            $params[] = $offset;
            $stmt->execute($params);
            $notifications = $stmt->fetchAll();

            // –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            $count_stmt = $conn->prepare("
                SELECT COUNT(*)
                FROM notifications n
                INNER JOIN tables t ON n.table_id = t.id
                $where_clause
            ");
            $count_params = array_slice($params, 0, -2); // –£–±–∏—Ä–∞–µ–º limit –∏ offset
            $count_stmt->execute($count_params);
            $total = $count_stmt->fetchColumn();

            echo json_encode([
                'success' => true,
                'data' => $notifications,
                'pagination' => [
                    'total' => (int)$total,
                    'limit' => $limit,
                    'offset' => $offset,
                    'has_more' => ($offset + $limit) < $total
                ]
            ]);
            break;

        case 'unread_count':
            // –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            $stmt = $conn->prepare("SELECT COUNT(*) FROM notifications WHERE is_read = 0");
            $stmt->execute();
            $count = $stmt->fetchColumn();

            echo json_encode([
                'success' => true,
                'unread_count' => (int)$count
            ]);
            break;

        case 'stats':
            // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            $stmt = $conn->prepare("
                SELECT
                    type,
                    COUNT(*) as count,
                    SUM(CASE WHEN is_read = 0 THEN 1 ELSE 0 END) as unread_count,
                    MAX(created_at) as last_notification
                FROM notifications
                WHERE created_at >= DATE_SUB(NOW(), INTERVAL 24 HOUR)
                GROUP BY type
                ORDER BY count DESC
            ");
            $stmt->execute();
            $stats = $stmt->fetchAll();

            echo json_encode([
                'success' => true,
                'data' => $stats
            ]);
            break;

        default:
            throw new Exception('Unknown action');
    }
}

function handlePost($conn, $input) {
    $action = $input['action'] ?? 'create';

    switch ($action) {
        case 'create':
            // –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            $session_id = $input['session_id'] ?? '';
            $table_number = (int)($input['table_number'] ?? 0);
            $type = $input['type'] ?? '';
            $message = $input['message'] ?? '';

            if (empty($session_id) || $table_number <= 0 || empty($type)) {
                throw new Exception('Missing required parameters');
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏
            $stmt = $conn->prepare("
                SELECT s.id, s.table_id, t.table_number
                FROM sessions s
                INNER JOIN tables t ON s.table_id = t.id
                WHERE s.session_id = ?
                AND t.table_number = ?
                AND s.is_active = 1
                AND s.expires_at > NOW()
            ");
            $stmt->execute([$session_id, $table_number]);
            $session = $stmt->fetch();

            if (!$session) {
                throw new Exception('Invalid or expired session');
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            $valid_types = [
                'call_waiter', 'make_order', 'request_bill_card',
                'request_bill_cash', 'call_shisha', 'change_coal'
            ];

            if (!in_array($type, $valid_types)) {
                throw new Exception('Invalid notification type');
            }

            // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            $stmt = $conn->prepare("INSERT INTO notifications (table_id, session_id, type, message, is_read) VALUES (?, ?, ?, ?, 0)");
            $stmt->execute([$session['table_id'], $session_id, $type, $message]);

            $notification_id = $conn->lastInsertId();

            // –ü–æ–ª—É—á–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
            $stmt = $conn->prepare("
                SELECT n.*, t.table_number
                FROM notifications n
                INNER JOIN tables t ON n.table_id = t.id
                WHERE n.id = ?
            ");
            $stmt->execute([$notification_id]);
            $notification = $stmt->fetch();

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
            if (sendTelegramNotification($notification)) {
                // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –≤ Telegram
                $stmt = $conn->prepare("UPDATE notifications SET telegram_sent = 1 WHERE id = ?");
                $stmt->execute([$notification_id]);
            }

            echo json_encode([
                'success' => true,
                'data' => $notification,
                'message' => 'Notification created successfully'
            ]);
            break;

        default:
            throw new Exception('Unknown action');
    }
}

function handlePut($conn, $input) {
    $action = $input['action'] ?? 'mark_read';

    switch ($action) {
        case 'mark_read':
            // –û—Ç–º–µ—Ç–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
            $notification_id = (int)($input['notification_id'] ?? 0);

            if ($notification_id <= 0) {
                throw new Exception('Invalid notification ID');
            }

            $stmt = $conn->prepare("UPDATE notifications SET is_read = 1 WHERE id = ?");
            $stmt->execute([$notification_id]);

            echo json_encode([
                'success' => true,
                'message' => 'Notification marked as read'
            ]);
            break;

        case 'mark_all_read':
            // –û—Ç–º–µ—Ç–∏—Ç—å –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
            $table_id = (int)($input['table_id'] ?? 0);

            if ($table_id > 0) {
                // –û—Ç–º–µ—Ç–∏—Ç—å –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å—Ç–æ–ª–∏–∫–∞
                $stmt = $conn->prepare("UPDATE notifications SET is_read = 1 WHERE table_id = ? AND is_read = 0");
                $stmt->execute([$table_id]);
            } else {
                // –û—Ç–º–µ—Ç–∏—Ç—å –≤—Å–µ
                $stmt = $conn->prepare("UPDATE notifications SET is_read = 1 WHERE is_read = 0");
                $stmt->execute();
            }

            $marked = $stmt->rowCount();

            echo json_encode([
                'success' => true,
                'marked_count' => $marked,
                'message' => "Marked $marked notifications as read"
            ]);
            break;

        default:
            throw new Exception('Unknown action');
    }
}

function handleDelete($conn, $input) {
    $action = $input['action'] ?? 'single';

    switch ($action) {
        case 'single':
            // –£–¥–∞–ª–∏—Ç—å –æ–¥–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            $notification_id = (int)($input['notification_id'] ?? 0);

            if ($notification_id <= 0) {
                throw new Exception('Invalid notification ID');
            }

            $stmt = $conn->prepare("DELETE FROM notifications WHERE id = ?");
            $stmt->execute([$notification_id]);

            echo json_encode([
                'success' => true,
                'message' => 'Notification deleted successfully'
            ]);
            break;

        case 'old':
            // –£–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (—Å—Ç–∞—Ä—à–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π)
            $days = (int)($input['days'] ?? 7);

            $stmt = $conn->prepare("DELETE FROM notifications WHERE created_at < DATE_SUB(NOW(), INTERVAL ? DAY)");
            $stmt->execute([$days]);

            $deleted = $stmt->rowCount();

            echo json_encode([
                'success' => true,
                'deleted_count' => $deleted,
                'message' => "Deleted $deleted old notifications"
            ]);
            break;

        case 'read':
            // –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            $stmt = $conn->prepare("DELETE FROM notifications WHERE is_read = 1");
            $stmt->execute();

            $deleted = $stmt->rowCount();

            echo json_encode([
                'success' => true,
                'deleted_count' => $deleted,
                'message' => "Deleted $deleted read notifications"
            ]);
            break;

        default:
            throw new Exception('Unknown action');
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∞ –¥–ª—è push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π)
function sendNotification($type, $table_number, $message = '') {
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    // –∏–ª–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å —Å–∏—Å—Ç–µ–º–∞–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (Telegram, Email –∏ —Ç.–¥.)

    $notification_text = getNotificationText($type, $table_number, $message);

    // –ü—Ä–∏–º–µ—Ä –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    error_log("Notification: $notification_text");

    return $notification_text;
}

function sendTelegramNotification($notification) {
    // –ß–∏—Ç–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram –∏–∑ —Ñ–∞–π–ª–∞ –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    $telegram_config = getTelegramConfig();

    if (!$telegram_config['enabled'] || !$telegram_config['bot_token'] || !$telegram_config['chat_id']) {
        error_log("Telegram –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ");
        return false;
    }

    $message = formatTelegramMessage($notification);

    $data = [
        'chat_id' => $telegram_config['chat_id'],
        'text' => $message,
        'parse_mode' => 'HTML'
    ];

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å ID —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    if ($notification['id']) {
        $keyboard = [
            'inline_keyboard' => [
                [
                    [
                        'text' => '‚úÖ –ü–†–ò–ù–Ø–¢–¨',
                        'callback_data' => "accept_{$notification['id']}"
                    ]
                ]
            ]
        ];
        $data['reply_markup'] = json_encode($keyboard);
    }

    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, "https://api.telegram.org/bot{$telegram_config['bot_token']}/sendMessage");
    curl_setopt($ch, CURLOPT_POST, true);
    curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($data));
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($ch, CURLOPT_TIMEOUT, 10);

    $response = curl_exec($ch);
    $http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);
    curl_close($ch);

    if ($http_code === 200) {
        error_log("Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ");
        return true;
    } else {
        error_log("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: HTTP $http_code, Response: $response");
        return false;
    }
}

function getTelegramConfig() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    try {
        $conn = getDBConnection();
        $stmt = $conn->prepare("SELECT setting_key, setting_value FROM settings WHERE setting_key IN ('telegram_bot_token', 'telegram_chat_id', 'telegram_enabled')");
        $stmt->execute();
        $settings = $stmt->fetchAll(PDO::FETCH_KEY_PAIR);

        return [
            'enabled' => ($settings['telegram_enabled'] ?? 'false') === 'true',
            'bot_token' => $settings['telegram_bot_token'] ?? '',
            'chat_id' => $settings['telegram_chat_id'] ?? ''
        ];
    } catch (Exception $e) {
        error_log("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ Telegram: " . $e->getMessage());
        return ['enabled' => false, 'bot_token' => '', 'chat_id' => ''];
    }
}

function formatTelegramMessage($notification) {
    $table_number = $notification['table_number'];
    $type = $notification['type'];
    $time = date('H:i:s');

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    $notification_types = [
        'make_order' => [
            'emoji' => 'üìù',
            'title' => '–ó–ê–ö–ê–ó',
            'description' => '–ö–ª–∏–µ–Ω—Ç —Ö–æ—á–µ—Ç —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑',
            'priority' => 'üî∏'
        ],
        'request_bill_card' => [
            'emoji' => 'üí≥',
            'title' => '–°–ß–ï–¢ (–ö–ê–†–¢–ê)',
            'description' => '–ö–ª–∏–µ–Ω—Ç –ø—Ä–æ—Å–∏—Ç —Å—á–µ—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã –∫–∞—Ä—Ç–æ–π',
            'priority' => 'üîπ'
        ],
        'request_bill_cash' => [
            'emoji' => 'üíµ',
            'title' => '–°–ß–ï–¢ (–ù–ê–õ–ò–ß–ù–´–ï)',
            'description' => '–ö–ª–∏–µ–Ω—Ç –ø—Ä–æ—Å–∏—Ç —Å—á–µ—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã –Ω–∞–ª–∏—á–Ω—ã–º–∏',
            'priority' => 'üîπ'
        ],
        'call_shisha' => [
            'emoji' => 'üí®',
            'title' => '–ö–ê–õ–¨–Ø–ù–©–ò–ö',
            'description' => '–ö–ª–∏–µ–Ω—Ç –≤—ã–∑—ã–≤–∞–µ—Ç –∫–∞–ª—å—è–Ω—â–∏–∫–∞',
            'priority' => 'üî∏'
        ],
        'change_coal' => [
            'emoji' => 'üî•',
            'title' => '–°–ú–ï–ù–ê –£–ì–õ–Ø',
            'description' => '–ö–ª–∏–µ–Ω—Ç –ø—Ä–æ—Å–∏—Ç –ø–æ–º–µ–Ω—è—Ç—å —É–≥–æ–ª—å',
            'priority' => 'üîπ'
        ]
    ];

    $type_info = $notification_types[$type] ?? [
        'emoji' => '‚ùì',
        'title' => strtoupper($type),
        'description' => '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞',
        'priority' => 'üî∏'
    ];

    $message = $type_info['priority'] . " <b>–ù–û–í–´–ô –ó–ê–ü–†–û–°</b> " . $type_info['priority'] . "\n\n";
    $message .= $type_info['emoji'] . " <b>–¢–ò–ü:</b> " . $type_info['title'] . "\n";
    $message .= "üè∑Ô∏è <b>–°–¢–û–õ–ò–ö:</b> #" . $table_number . "\n";
    $message .= "üïê <b>–í–†–ï–ú–Ø:</b> " . $time . "\n\n";
    $message .= "üìã <b>–î–ï–¢–ê–õ–ò:</b>\n" . $type_info['description'] . "\n\n";
    $message .= "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ";

    return $message;
}

function getNotificationText($type, $table_number, $message = '') {
    $texts = [
        'call_waiter' => "üôã‚Äç‚ôÇÔ∏è Table $table_number: Customer is calling for a waiter",
        'make_order' => "üìù Table $table_number: Customer wants to make an order",
        'request_bill_card' => "üí≥ Table $table_number: Customer requests bill (Card payment)",
        'request_bill_cash' => "üíµ Table $table_number: Customer requests bill (Cash payment)",
        'call_shisha' => "üí® Table $table_number: Customer is calling for shisha master",
        'change_coal' => "üî• Table $table_number: Customer requests coal change"
    ];

    $base_text = $texts[$type] ?? "Table $table_number: $type";

    return $message ? "$base_text - $message" : $base_text;
}
?>
