class MenuAdminPanel {
    constructor() {
        this.menuData = null;
        this.currentEditingItem = null;
        this.currentEditingCategory = null;
        this.init();
    }

    async init() {
        await this.loadData();
        this.renderMenuForm();
        this.renderPreview();
        this.bindEvents();
    }

    async loadData() {
        try {
            const timestamp = Date.now();
            const response = await fetch(`../data/menu-data.json?v=${timestamp}&_cache=no`, {
                method: 'GET',
                headers: {
                    'Cache-Control': 'no-cache, no-store, must-revalidate',
                    'Pragma': 'no-cache',
                    'Expires': '0'
                },
                cache: 'no-cache',
                mode: 'cors',
                credentials: 'same-origin'
            });

            if (!response.ok) {
                throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: ${response.status}`);
            }
            this.menuData = await response.json();
            console.log('üì° –î–∞–Ω–Ω—ã–µ –º–µ–Ω—é –∑–∞–≥—Ä—É–∂–µ–Ω—ã —Å —Å–µ—Ä–≤–µ—Ä–∞');
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –º–µ–Ω—é:', error);

            // Fallback –∫ localStorage
            const localData = localStorage.getItem('menuData');
            if (localData) {
                this.menuData = JSON.parse(localData);
                console.log('‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –º–µ–Ω—é –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ localStorage');
                this.showMessage('–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –∫—ç—à–∞ (—Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)', 'warning');
                return;
            }

            // –î–µ—Ñ–æ–ª—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            this.showMessage('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –º–µ–Ω—é', 'error');
            this.menuData = this.getDefaultData();
        }
    }

    getDefaultData() {
        return {
            pageTitle: "Menu",
            hero: {
                backgroundImage: "",
                title: "Menu"
            },
            categories: [
                {
                    id: "maki",
                    name: "Maki",
                    items: []
                }
            ]
        };
    }

    renderMenuForm() {
        const container = document.getElementById('menuFormContainer');
        container.innerHTML = `
            <div class="card">
                <div class="card-header">
                    <h2>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–µ–Ω—é</h2>
                    <p>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –∏ –±–ª—é–¥–∞–º–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞</p>
                    <div class="card-actions">
                        <button type="button" class="btn btn-warning" id="forceUpdateMenuBtn">–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –º–µ–Ω—é</button>
                    </div>
                </div>
                <div class="card-body">
                    <div class="form-group">
                        <label for="menuPageTitle">–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:</label>
                        <input type="text" id="menuPageTitle" value="${this.menuData.pageTitle}" class="form-control">
                    </div>

                    <div class="form-group">
                        <label for="menuHeroTitle">–ó–∞–≥–æ–ª–æ–≤–æ–∫ –≥–µ—Ä–æ—è:</label>
                        <input type="text" id="menuHeroTitle" value="${this.menuData.hero.title}" class="form-control">
                    </div>

                    <div class="form-group">
                        <label for="menuHeroImage">–§–æ–Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–µ—Ä–æ—è (URL):</label>
                        <input type="url" id="menuHeroImage" value="${this.menuData.hero.backgroundImage}" class="form-control" placeholder="https://example.com/image.jpg">
                    </div>

                    <div class="categories-section">
                        <div class="section-header">
                            <h3>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–µ–Ω—é</h3>
                            <button type="button" class="btn btn-success" id="addCategoryBtn">+ –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é</button>
                        </div>
                        <div id="categoriesContainer">
                            <!-- –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ -->
                        </div>
                    </div>
                </div>
            </div>

            <!-- –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–ª—é–¥–∞ -->
            <div id="itemModal" class="modal" style="display: none;">
                <div class="modal-content">
                    <div class="modal-header">
                        <h3 id="modalTitle">–î–æ–±–∞–≤–∏—Ç—å –±–ª—é–¥–æ</h3>
                        <span class="modal-close">&times;</span>
                    </div>
                    <div class="modal-body">
                        <div class="form-group">
                            <label for="itemName">–ù–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞:</label>
                            <input type="text" id="itemName" class="form-control">
                        </div>
                        <div class="form-group">
                            <label for="itemPrice">–¶–µ–Ω–∞:</label>
                            <input type="text" id="itemPrice" class="form-control" placeholder="$12">
                        </div>
                        <div class="form-group">
                            <label for="itemDescription">–û–ø–∏—Å–∞–Ω–∏–µ:</label>
                            <textarea id="itemDescription" class="form-control" rows="3"></textarea>
                        </div>
                        <div class="form-group">
                            <label for="itemImage">–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (URL):</label>
                            <input type="url" id="itemImage" class="form-control" placeholder="https://example.com/image.jpg">
                        </div>
                        <div class="form-group">
                            <label>
                                <input type="checkbox" id="itemSpicy"> –û—Å—Ç—Ä–æ–µ –±–ª—é–¥–æ
                            </label>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" id="cancelItemBtn">–û—Ç–º–µ–Ω–∞</button>
                        <button type="button" class="btn btn-primary" id="saveItemBtn">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
                    </div>
                </div>
            </div>
        `;

        this.renderCategories();

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        document.getElementById('forceUpdateMenuBtn').addEventListener('click', () => {
            this.forceUpdateMenuPage();
        });
    }

    renderCategories() {
        const container = document.getElementById('categoriesContainer');
        container.innerHTML = '';

        this.menuData.categories.forEach((category, categoryIndex) => {
            const categoryElement = this.createCategoryElement(category, categoryIndex);
            container.appendChild(categoryElement);
        });
    }

    createCategoryElement(category, categoryIndex) {
        const categoryDiv = document.createElement('div');
        categoryDiv.className = 'category-item';
        categoryDiv.innerHTML = `
            <div class="category-header">
                <div class="category-title">
                    <input type="text" value="${category.name}" class="category-name-input" data-category-index="${categoryIndex}">
                    <label>
                        <input type="checkbox" class="category-spicy-input" data-category-index="${categoryIndex}" ${category.spicy ? 'checked' : ''}>
                        –û—Å—Ç—Ä–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
                    </label>
                </div>
                <div class="category-actions">
                    <button type="button" class="btn btn-sm btn-success add-item-btn" data-category-index="${categoryIndex}">+ –î–æ–±–∞–≤–∏—Ç—å –±–ª—é–¥–æ</button>
                    <button type="button" class="btn btn-sm btn-danger delete-category-btn" data-category-index="${categoryIndex}">–£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é</button>
                </div>
            </div>
            <div class="items-container" data-category-index="${categoryIndex}">
                ${this.renderItems(category.items, categoryIndex)}
            </div>
        `;

        return categoryDiv;
    }

    renderItems(items, categoryIndex) {
        return items.map((item, itemIndex) => `
            <div class="item-card" data-category-index="${categoryIndex}" data-item-index="${itemIndex}">
                <div class="item-image">
                    <img src="${item.image}" alt="${item.name}" onerror="this.src='data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"100\" height=\"100\"><rect width=\"100\" height=\"100\" fill=\"%23ddd\"/><text x=\"50\" y=\"55\" text-anchor=\"middle\" fill=\"%23999\">No Image</text></svg>'">
                </div>
                <div class="item-content">
                    <div class="item-header">
                        <h4>${item.name} ${item.spicy ? 'üå∂Ô∏è' : ''}</h4>
                        <span class="item-price">${item.price}</span>
                    </div>
                    <p class="item-description">${item.description}</p>
                    <div class="item-actions">
                        <button type="button" class="btn btn-sm btn-primary edit-item-btn" data-category-index="${categoryIndex}" data-item-index="${itemIndex}">–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</button>
                        <button type="button" class="btn btn-sm btn-danger delete-item-btn" data-category-index="${categoryIndex}" data-item-index="${itemIndex}">–£–¥–∞–ª–∏—Ç—å</button>
                    </div>
                </div>
            </div>
        `).join('');
    }

    bindEvents() {
        // –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è —Ñ–æ—Ä–º—ã
        document.getElementById('menuPageTitle').addEventListener('input', () => this.updateData());
        document.getElementById('menuHeroTitle').addEventListener('input', () => this.updateData());
        document.getElementById('menuHeroImage').addEventListener('input', () => this.updateData());

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        document.getElementById('addCategoryBtn').addEventListener('click', () => this.addCategory());

        // –î–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        document.getElementById('categoriesContainer').addEventListener('click', (e) => {
            const categoryIndex = e.target.dataset.categoryIndex;
            const itemIndex = e.target.dataset.itemIndex;

            if (e.target.classList.contains('add-item-btn')) {
                this.openItemModal(parseInt(categoryIndex));
            } else if (e.target.classList.contains('edit-item-btn')) {
                this.openItemModal(parseInt(categoryIndex), parseInt(itemIndex));
            } else if (e.target.classList.contains('delete-item-btn')) {
                this.deleteItem(parseInt(categoryIndex), parseInt(itemIndex));
            } else if (e.target.classList.contains('delete-category-btn')) {
                this.deleteCategory(parseInt(categoryIndex));
            }
        });

        // –°–æ–±—ã—Ç–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        document.getElementById('categoriesContainer').addEventListener('input', (e) => {
            if (e.target.classList.contains('category-name-input')) {
                const categoryIndex = parseInt(e.target.dataset.categoryIndex);
                this.menuData.categories[categoryIndex].name = e.target.value;
                this.renderPreview();
            } else if (e.target.classList.contains('category-spicy-input')) {
                const categoryIndex = parseInt(e.target.dataset.categoryIndex);
                this.menuData.categories[categoryIndex].spicy = e.target.checked;
                this.renderPreview();
            }
        });

        // –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        document.getElementById('cancelItemBtn').addEventListener('click', () => this.closeItemModal());
        document.getElementById('saveItemBtn').addEventListener('click', () => this.saveItem());
        document.querySelector('.modal-close').addEventListener('click', () => this.closeItemModal());

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –µ–≥–æ
        document.getElementById('itemModal').addEventListener('click', (e) => {
            if (e.target.id === 'itemModal') {
                this.closeItemModal();
            }
        });
    }

    updateData() {
        this.menuData.pageTitle = document.getElementById('menuPageTitle').value;
        this.menuData.hero.title = document.getElementById('menuHeroTitle').value;
        this.menuData.hero.backgroundImage = document.getElementById('menuHeroImage').value;
        this.renderPreview();
    }

    addCategory() {
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–π –Ω–∞ —Ç–µ–∫—É—â–µ–º –≤—Ä–µ–º–µ–Ω–∏ –∏ —Å–ª—É—á–∞–π–Ω–æ—Å—Ç–∏
        const timestamp = Date.now();
        const randomPart = Math.floor(Math.random() * 10000);
        const uniqueId = `category-${timestamp}-${randomPart}`;

        // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        let categoryNumber = this.menuData.categories.length + 1;
        let categoryName = `–ù–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è ${categoryNumber}`;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º
        while (this.menuData.categories.some(cat => cat.name === categoryName)) {
            categoryNumber++;
            categoryName = `–ù–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è ${categoryNumber}`;
        }

        const newCategory = {
            id: uniqueId,
            name: categoryName,
            items: []
        };

        this.menuData.categories.push(newCategory);
        this.renderCategories();
        this.renderPreview();

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        this.showMessage(`–ö–∞—Ç–µ–≥–æ—Ä–∏—è "${categoryName}" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞`, 'success');

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å–∫—Ä—ã–≤–∞–µ–º –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        setTimeout(() => {
            const newCategoryElement = document.querySelector(`.category-item[data-category-index="${this.menuData.categories.length - 1}"]`);
            if (newCategoryElement) {
                newCategoryElement.scrollIntoView({ behavior: 'smooth', block: 'center' });
                const categoryNameInput = newCategoryElement.querySelector('.category-name-input');
                if (categoryNameInput) {
                    categoryNameInput.focus();
                    categoryNameInput.select();
                }
            }
        }, 100);
    }

    deleteCategory(categoryIndex) {
        // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        const categoryName = this.menuData.categories[categoryIndex]?.name || `–ö–∞—Ç–µ–≥–æ—Ä–∏—è ${categoryIndex + 1}`;

        if (confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é "${categoryName}" –∏ –≤—Å–µ –±–ª—é–¥–∞ –≤ –Ω–µ–π?`)) {
            // –£–¥–∞–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –º–∞—Å—Å–∏–≤–∞
            this.menuData.categories.splice(categoryIndex, 1);

            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            this.renderCategories();
            this.renderPreview();

            // –ï—Å–ª–∏ –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É–¥–∞–ª–µ–Ω—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            if (this.menuData.categories.length === 0) {
                this.showMessage('–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É–¥–∞–ª–µ–Ω—ã. –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞–∂–º–∏—Ç–µ "–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é"', 'info');

                // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–≤—å—é —Å –ø—É—Å—Ç—ã–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º
                const previewContent = document.getElementById('previewContent');
                if (previewContent) {
                    previewContent.innerHTML = `
                        <div class="preview-empty">
                            <p>–í –º–µ–Ω—é –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π. –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é.</p>
                        </div>
                    `;
                }
            } else {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏
                this.showMessage(`–ö–∞—Ç–µ–≥–æ—Ä–∏—è "${categoryName}" —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞`, 'success');
            }

            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            this.saveData();
        }
    }

    openItemModal(categoryIndex, itemIndex = null) {
        this.currentEditingCategory = categoryIndex;
        this.currentEditingItem = itemIndex;

        const modal = document.getElementById('itemModal');
        const title = document.getElementById('modalTitle');

        if (itemIndex !== null) {
            // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –±–ª—é–¥–∞
            const item = this.menuData.categories[categoryIndex].items[itemIndex];
            title.textContent = '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –±–ª—é–¥–æ';
            document.getElementById('itemName').value = item.name;
            document.getElementById('itemPrice').value = item.price;
            document.getElementById('itemDescription').value = item.description;
            document.getElementById('itemImage').value = item.image;
            document.getElementById('itemSpicy').checked = item.spicy || false;
        } else {
            // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –±–ª—é–¥–∞
            title.textContent = '–î–æ–±–∞–≤–∏—Ç—å –±–ª—é–¥–æ';
            document.getElementById('itemName').value = '';
            document.getElementById('itemPrice').value = '';
            document.getElementById('itemDescription').value = '';
            document.getElementById('itemImage').value = '';
            document.getElementById('itemSpicy').checked = false;
        }

        modal.style.display = 'block';
    }

    closeItemModal() {
        document.getElementById('itemModal').style.display = 'none';
        this.currentEditingCategory = null;
        this.currentEditingItem = null;
    }

    saveItem() {
        const name = document.getElementById('itemName').value.trim();
        const price = document.getElementById('itemPrice').value.trim();
        const description = document.getElementById('itemDescription').value.trim();
        const image = document.getElementById('itemImage').value.trim();
        const spicy = document.getElementById('itemSpicy').checked;

        if (!name || !price || !description) {
            alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è');
            return;
        }

        const itemData = {
            id: this.currentEditingItem !== null ?
                this.menuData.categories[this.currentEditingCategory].items[this.currentEditingItem].id :
                `item-${Date.now()}`,
            name,
            price,
            description,
            image: image || 'https://via.placeholder.com/150x150?text=No+Image',
            spicy
        };

        if (this.currentEditingItem !== null) {
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –±–ª—é–¥–∞
            this.menuData.categories[this.currentEditingCategory].items[this.currentEditingItem] = itemData;
        } else {
            // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –±–ª—é–¥–∞
            this.menuData.categories[this.currentEditingCategory].items.push(itemData);
        }

        this.closeItemModal();
        this.renderCategories();
        this.renderPreview();
    }

    deleteItem(categoryIndex, itemIndex) {
        if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ –±–ª—é–¥–æ?')) {
            this.menuData.categories[categoryIndex].items.splice(itemIndex, 1);
            this.renderCategories();
            this.renderPreview();
        }
    }

    renderPreview() {
        const previewContent = document.getElementById('previewContent');
        let previewHTML = `
            <div class="menu-preview">
                <div class="preview-hero">
                    <h2>${this.menuData.hero.title}</h2>
                    ${this.menuData.hero.backgroundImage ? `<img src="${this.menuData.hero.backgroundImage}" alt="Hero" style="max-width: 200px;">` : ''}
                </div>
        `;

        this.menuData.categories.forEach(category => {
            previewHTML += `
                <div class="preview-category">
                    <h3>${category.name} ${category.spicy ? 'üå∂Ô∏è' : ''}</h3>
                    <div class="preview-items">
            `;

            category.items.forEach(item => {
                previewHTML += `
                    <div class="preview-item">
                        <div class="preview-item-image">
                            <img src="${item.image}" alt="${item.name}" style="width: 60px; height: 60px; object-fit: cover; border-radius: 4px;">
                        </div>
                        <div class="preview-item-content">
                            <div class="preview-item-header">
                                <span class="preview-item-name">${item.name} ${item.spicy ? 'üå∂Ô∏è' : ''}</span>
                                <span class="preview-item-price">${item.price}</span>
                            </div>
                            <p class="preview-item-description">${item.description}</p>
                        </div>
                    </div>
                `;
            });

            previewHTML += `
                    </div>
                </div>
            `;
        });

        previewHTML += '</div>';
        previewContent.innerHTML = previewHTML;
    }

    async saveData() {
        try {
            let serverSaved = false;
            let errorMessage = '';

            // –ü–†–ò–û–†–ò–¢–ï–¢: –ø—ã—Ç–∞–µ–º—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            try {
                const response = await fetch('save-menu-data.php', {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                        'Cache-Control': 'no-cache',
                        'Connection': 'close'  // –ü—Ä–∏–Ω—É–∂–¥–∞–µ—Ç HTTP/1.1
                    },
                    body: JSON.stringify(this.menuData, null, 2),
                    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                    cache: 'no-cache',
                    mode: 'cors',
                    credentials: 'same-origin'
                });

                if (response.ok) {
                    const result = await response.json();
                    serverSaved = true;
                    console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –º–µ–Ω—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:', result);
                } else {
                    const errorData = await response.text();
                    errorMessage = `–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${response.status}`;
                    console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:', errorData);
                }
            } catch (error) {
                errorMessage = '–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º';
                console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error);

                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Å –¥—Ä—É–≥–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
                try {
                    console.log('üîÑ –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å...');
                    const retryResponse = await fetch('save-menu-data.php', {
                        method: 'POST', // –ü—Ä–æ–±—É–µ–º POST –≤–º–µ—Å—Ç–æ PUT
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(this.menuData, null, 2)
                    });

                    if (retryResponse.ok) {
                        const result = await retryResponse.json();
                        serverSaved = true;
                        console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –º–µ–Ω—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ (–ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞):', result);
                    }
                } catch (retryError) {
                    console.log('‚ùå –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å:', retryError);
                }
            }

            if (serverSaved) {
                // –ï—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ, —Ç–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage –∫–∞–∫ –∫—ç—à
                localStorage.setItem('menuData', JSON.stringify(this.menuData));
                this.notifyAllChannels();
                this.showMessage('‚úÖ –î–∞–Ω–Ω—ã–µ –º–µ–Ω—é —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ!', 'success');
                console.log('üîÑ –î–∞–Ω–Ω—ã–µ –º–µ–Ω—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É (–≤—Å–µ –º–µ—Ç–æ–¥—ã)');
            } else {
                // –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ –∫–∞–∫ —Ä–µ–∑–µ—Ä–≤
                localStorage.setItem('menuData', JSON.stringify(this.menuData));
                this.notifyAllChannels();
                this.showMessage(`‚ö†Ô∏è ${errorMessage}. –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω–æ.`, 'warning');
                console.log('üìÅ –§–∞–π–ª menu-data.json —Å–∫–∞—á–∞–Ω');
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
            this.renderPreview();
            return serverSaved;

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);

            // –í –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ö–æ—Ç—è –±—ã –ª–æ–∫–∞–ª—å–Ω–æ
            localStorage.setItem('menuData', JSON.stringify(this.menuData));
            this.notifyAllChannels();
            this.showMessage('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è. –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω–æ.', 'error');
            this.renderPreview();
            return false;
        }
    }

    notifyAllChannels() {
        try {
            // 1. –ò—Å–ø–æ–ª—å–∑—É–µ–º localStorage –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É –≤–∫–ª–∞–¥–∫–∞–º–∏
            const timestamp = Date.now();
            localStorage.setItem('menuDataTimestamp', timestamp.toString());

            // 2. –ò—Å–ø–æ–ª—å–∑—É–µ–º postMessage –¥–ª—è –≤—Å–µ—Ö –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Ñ—Ä–µ–π–º–æ–≤ —Å –º–µ–Ω—é
            this.notifyViaPostMessage();

            // 3. –ò—Å–ø–æ–ª—å–∑—É–µ–º BroadcastChannel API –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
            this.notifyViaBroadcastChannel();

            // 4. –í—ã–∑—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü –≤ —Ç–æ–º –∂–µ –æ–∫–Ω–µ
            this.notifyViaCustomEvent();

            console.log('üîÑ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –ø–æ –≤—Å–µ–º –∫–∞–Ω–∞–ª–∞–º');
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
        }
    }

    notifyViaPostMessage() {
        try {
            // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Ñ—Ä–µ–π–º—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            const iframes = document.querySelectorAll('iframe');
            iframes.forEach(iframe => {
                try {
                    iframe.contentWindow.postMessage({
                        type: 'menuDataUpdate',
                        data: this.menuData,
                        source: 'admin-panel',
                        timestamp: Date.now()
                    }, '*');
                } catch (frameError) {
                    console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Ñ—Ä–µ–π–º—É:', frameError);
                }
            });

            // –¢–∞–∫–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º—É –æ–∫–Ω—É, –µ—Å–ª–∏ –º—ã –≤–æ —Ñ—Ä–µ–π–º–µ
            if (window.parent !== window) {
                window.parent.postMessage({
                    type: 'menuDataUpdate',
                    data: this.menuData,
                    source: 'admin-panel',
                    timestamp: Date.now()
                }, '*');
            }

            // –ò –≤—Å–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–º –æ–∫–Ω–∞–º –º–µ–Ω—é
            if (window.opener) {
                window.opener.postMessage({
                    type: 'menuDataUpdate',
                    data: this.menuData,
                    source: 'admin-panel',
                    timestamp: Date.now()
                }, '*');
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ postMessage:', error);
        }
    }

    notifyViaBroadcastChannel() {
        try {
            if (typeof BroadcastChannel !== 'undefined') {
                const channel = new BroadcastChannel('menuUpdates');
                channel.postMessage({
                    type: 'menuDataUpdate',
                    data: this.menuData,
                    source: 'admin-panel',
                    timestamp: Date.now()
                });

                // –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–∞–Ω–∞–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
                setTimeout(() => {
                    channel.close();
                }, 1000);
            }
        } catch (error) {
            console.log('BroadcastChannel –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ —ç—Ç–æ–º –±—Ä–∞—É–∑–µ—Ä–µ:', error);
        }
    }

    notifyViaCustomEvent() {
        try {
            // –°–æ–∑–¥–∞–µ–º –∏ –¥–∏—Å–ø–∞—Ç—á–∏–º –∫–∞—Å—Ç–æ–º–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
            const event = new CustomEvent('menuDataForceUpdate', {
                detail: {
                    data: this.menuData,
                    source: 'admin-panel',
                    timestamp: Date.now()
                }
            });
            window.dispatchEvent(event);

            // –ï—Å–ª–∏ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –º–µ–Ω—é –≤ —ç—Ç–æ–º –∂–µ –¥–æ–∫—É–º–µ–Ω—Ç–µ
            document.querySelectorAll('[data-menu-container]').forEach(container => {
                container.dispatchEvent(event);
            });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ CustomEvent:', error);
        }
    }

    showMessage(text, type) {
        const messageEl = document.getElementById('statusMessage');
        messageEl.textContent = text;
        messageEl.className = `status-message ${type}`;
        messageEl.style.display = 'block';

        setTimeout(() => {
            messageEl.style.display = 'none';
        }, 3000);
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –º–µ–Ω—é
    forceUpdateMenuPage() {
        try {
            // –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –≤—Å–µ—Ö –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ–∫–æ–Ω/–≤–∫–ª–∞–¥–æ–∫
            const timestamp = Date.now();

            // 1. –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∫—É –≤—Ä–µ–º–µ–Ω–∏ –≤ localStorage –¥–ª—è —Ç—Ä–∏–≥–≥–µ—Ä–∞ —Å–æ–±—ã—Ç–∏–π storage
            localStorage.removeItem('menuData');
            localStorage.setItem('menuData', JSON.stringify(this.menuData));
            localStorage.setItem('menuDataTimestamp', timestamp.toString());

            // 2. –î–æ–±–∞–≤–ª—è–µ–º special —Ñ–ª–∞–≥ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            localStorage.setItem('menuForceReload', 'true');

            // 3. –ò—Å–ø–æ–ª—å–∑—É–µ–º BroadcastChannel –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
            this.notifyViaBroadcastChannel();

            // 4. –ò—Å–ø–æ–ª—å–∑—É–µ–º postMessage –¥–ª—è –≤—Å–µ—Ö –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Ñ—Ä–µ–π–º–æ–≤
            this.notifyViaPostMessage();

            // 5. –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
            this.notifyViaCustomEvent();

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            this.showMessage('–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –º–µ–Ω—é', 'success');

            console.log('üîÑ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');

            // –ß–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã —É–¥–∞–ª—è–µ–º —Ñ–ª–∞–≥
            setTimeout(() => {
                localStorage.removeItem('menuForceReload');
            }, 2000);

            return true;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏:', error);
            this.showMessage('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–∏–≥–Ω–∞–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ' + error.message, 'error');
            return false;
        }
    }
}
