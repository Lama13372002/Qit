class QRAdminPanel {
    constructor() {
        this.tables = [];
        this.notifications = [];
        this.baseUrl = window.location.origin;
        this.init();
    }

    init() {
        this.createQRInterface();
        this.loadTables();
        this.loadNotifications();
        this.startNotificationPolling();
    }

    createQRInterface() {
        const container = document.getElementById('qrFormContainer');
        if (!container) return;

        container.innerHTML = `
            <div class="qr-admin-container">
                <!-- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–æ–ª–∏–∫–∞–º–∏ -->
                <div class="card">
                    <div class="card-header">
                        <h2>üéØ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ QR-–∫–æ–¥–∞–º–∏ —Å—Ç–æ–ª–∏–∫–æ–≤</h2>
                        <p>–°–æ–∑–¥–∞–≤–∞–π—Ç–µ, —É–ø—Ä–∞–≤–ª—è–π—Ç–µ –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ QR-–∫–æ–¥—ã –¥–ª—è —Å—Ç–æ–ª–∏–∫–æ–≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞</p>
                    </div>
                    <div class="card-body">
                        <!-- –ë—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ -->
                        <div class="quick-actions">
                            <div class="form-group">
                                <label for="tableCount">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–∏–∫–æ–≤:</label>
                                <div class="input-group">
                                    <input type="number" id="tableCount" min="1" max="100" value="15" class="form-control">
                                    <button onclick="qrAdmin.generateTables()" class="btn btn-primary">
                                        ‚ö° –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª–∏–∫–∏
                                    </button>
                                </div>
                            </div>

                            <div class="form-group">
                                <label for="baseUrl">–ë–∞–∑–æ–≤—ã–π URL:</label>
                                <input type="url" id="baseUrl" value="${this.baseUrl}" class="form-control"
                                       placeholder="https://callianolounge.eu">
                            </div>
                        </div>

                        <!-- –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ -->
                        <div class="individual-controls">
                            <h3>–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ</h3>
                            <div class="form-row">
                                <input type="number" id="singleTableNumber" placeholder="–ù–æ–º–µ—Ä —Å—Ç–æ–ª–∏–∫–∞"
                                       class="form-control" style="width: 150px;">
                                <button onclick="qrAdmin.createSingleTable()" class="btn btn-secondary">
                                    ‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å—Ç–æ–ª–∏–∫
                                </button>
                                <button onclick="qrAdmin.deleteAllTables()" class="btn btn-danger"
                                        style="margin-left: auto;">
                                    üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å—Ç–æ–ª–∏–∫–∏
                                </button>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- –°–ø–∏—Å–æ–∫ —Å—Ç–æ–ª–∏–∫–æ–≤ -->
                <div class="card">
                    <div class="card-header">
                        <h3>üìã –ê–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç–æ–ª–∏–∫–∏</h3>
                        <div class="table-stats">
                            <span id="tableStats">–ó–∞–≥—Ä—É–∑–∫–∞...</span>
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="table-controls">
                            <input type="text" id="tableSearch" placeholder="üîç –ü–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É —Å—Ç–æ–ª–∏–∫–∞..."
                                   class="form-control" onkeyup="qrAdmin.filterTables()">
                            <select id="statusFilter" onchange="qrAdmin.filterTables()" class="form-control">
                                <option value="">–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã</option>
                                <option value="active">–¢–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ</option>
                                <option value="inactive">–¢–æ–ª—å–∫–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ</option>
                            </select>
                        </div>
                        <div id="tablesContainer" class="tables-grid">
                            <div class="loading">–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–æ–ª–∏–∫–æ–≤...</div>
                        </div>
                    </div>
                </div>

                <!-- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è -->
                <div class="card">
                    <div class="card-header">
                        <h3>üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç —Å—Ç–æ–ª–∏–∫–æ–≤</h3>
                        <div class="notification-controls">
                            <button onclick="qrAdmin.markAllNotificationsRead()" class="btn btn-secondary">
                                ‚úì –û—Ç–º–µ—Ç–∏—Ç—å –≤—Å–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
                            </button>
                            <button onclick="qrAdmin.clearOldNotifications()" class="btn btn-outline">
                                üßπ –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ
                            </button>
                        </div>
                    </div>
                    <div class="card-body">
                        <div id="notificationsContainer" class="notifications-list">
                            <div class="loading">–ó–∞–≥—Ä—É–∑–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...</div>
                        </div>
                    </div>
                </div>
            </div>
        `;

        this.addQRStyles();
    }

    addQRStyles() {
        const style = document.createElement('style');
        style.textContent = `
            .qr-admin-container { gap: 20px; display: flex; flex-direction: column; }
            .quick-actions { display: flex; gap: 20px; margin-bottom: 20px; flex-wrap: wrap; }
            .input-group { display: flex; gap: 10px; align-items: end; }
            .form-row { display: flex; gap: 10px; align-items: center; }

            .tables-grid { display: grid; grid-template-columns: repeat(auto-fill, minmax(300px, 1fr)); gap: 15px; }
            .table-card {
                border: 1px solid #ddd; border-radius: 8px; padding: 15px;
                background: #f9f9f9; transition: all 0.3s ease;
            }
            .table-card.active { border-color: #28a745; background: #f8fff9; }
            .table-card.inactive { border-color: #dc3545; background: #fff8f8; opacity: 0.7; }
            .table-card:hover { transform: translateY(-2px); box-shadow: 0 4px 12px rgba(0,0,0,0.1); }

            .table-header { display: flex; justify-content: between; align-items: center; margin-bottom: 10px; }
            .table-number { font-size: 18px; font-weight: bold; }
            .table-status {
                padding: 4px 8px; border-radius: 12px; font-size: 12px; font-weight: bold;
                color: white; text-transform: uppercase;
            }
            .table-status.active { background: #28a745; }
            .table-status.inactive { background: #dc3545; }

            .qr-link {
                font-family: monospace; font-size: 12px; color: #666;
                word-break: break-all; margin: 10px 0;
                background: #f5f5f5; padding: 8px; border-radius: 4px;
            }

            .table-actions { display: flex; gap: 8px; margin-top: 10px; }
            .table-actions button { font-size: 12px; padding: 6px 12px; }

            .notification-item {
                border-left: 4px solid #007bff; padding: 12px; margin-bottom: 10px;
                background: #f8f9fa; border-radius: 0 6px 6px 0;
            }
            .notification-item.unread { border-left-color: #dc3545; background: #fff5f5; }
            .notification-header { display: flex; justify-content: space-between; margin-bottom: 5px; }
            .notification-type { font-weight: bold; color: #007bff; }
            .notification-time { font-size: 12px; color: #666; }
            .notification-message { font-size: 14px; }

            .table-controls { display: flex; gap: 15px; margin-bottom: 20px; align-items: center; }
            .table-controls input, .table-controls select { max-width: 200px; }

            .table-stats { font-size: 14px; color: #666; }
            .notification-controls { display: flex; gap: 10px; }

            .loading { text-align: center; padding: 40px; color: #666; }

            @media (max-width: 768px) {
                .tables-grid { grid-template-columns: 1fr; }
                .quick-actions { flex-direction: column; }
                .table-controls { flex-direction: column; align-items: stretch; }
                .table-controls input, .table-controls select { max-width: 100%; }
            }
        `;
        document.head.appendChild(style);
    }

    async generateTables() {
        const count = parseInt(document.getElementById('tableCount').value);
        const baseUrl = document.getElementById('baseUrl').value || this.baseUrl;

        if (!count || count < 1 || count > 100) {
            this.showMessage('–£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–∏–∫–æ–≤ (1-100)', 'error');
            return;
        }

        try {
            const response = await fetch('../api/tables.php?action=generate_links&count=' + count + '&base_url=' + encodeURIComponent(baseUrl));
            const result = await response.json();

            if (result.success) {
                this.showMessage(result.message, 'success');
                this.loadTables();
            } else {
                this.showMessage(result.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–æ–ª–∏–∫–æ–≤', 'error');
            }
        } catch (error) {
            this.showMessage('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ' + error.message, 'error');
        }
    }

    async createSingleTable() {
        const tableNumber = parseInt(document.getElementById('singleTableNumber').value);
        const baseUrl = document.getElementById('baseUrl').value || this.baseUrl;

        if (!tableNumber || tableNumber < 1) {
            this.showMessage('–£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç–æ–ª–∏–∫–∞', 'error');
            return;
        }

        try {
            const response = await fetch('../api/tables.php', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    action: 'create',
                    table_number: tableNumber,
                    base_url: baseUrl
                })
            });

            const result = await response.json();

            if (result.success) {
                this.showMessage(result.message, 'success');
                document.getElementById('singleTableNumber').value = '';
                this.loadTables();
            } else {
                this.showMessage(result.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ç–æ–ª–∏–∫–∞', 'error');
            }
        } catch (error) {
            this.showMessage('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ' + error.message, 'error');
        }
    }

    async loadTables() {
        try {
            const response = await fetch('../api/tables.php?action=list');
            const result = await response.json();

            if (result.success) {
                this.tables = result.data;
                this.renderTables();
                this.updateTableStats();
            }
        } catch (error) {
            console.error('Error loading tables:', error);
            document.getElementById('tablesContainer').innerHTML =
                '<div class="error">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–æ–ª–∏–∫–æ–≤</div>';
        }
    }

    renderTables() {
        const container = document.getElementById('tablesContainer');

        if (this.tables.length === 0) {
            container.innerHTML = '<div class="empty-state">–°—Ç–æ–ª–∏–∫–∏ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º—É –≤—ã—à–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è.</div>';
            return;
        }

        container.innerHTML = this.tables.map(table => `
            <div class="table-card ${table.is_active ? 'active' : 'inactive'}">
                <div class="table-header">
                    <span class="table-number">–°—Ç–æ–ª–∏–∫ #${table.table_number}</span>
                    <span class="table-status ${table.is_active ? 'active' : 'inactive'}">
                        ${table.is_active ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}
                    </span>
                </div>

                <div class="qr-link">${table.qr_link}</div>

                <div class="table-info">
                    <small>–°–æ–∑–¥–∞–Ω: ${new Date(table.created_at).toLocaleString('ru')}</small>
                    ${table.active_sessions > 0 ? `<br><small style="color: #28a745;">üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π: ${table.active_sessions}</small>` : ''}
                </div>

                <div class="table-actions">
                    <button onclick="qrAdmin.copyTableLink('${table.qr_link}')" class="btn btn-outline" title="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É">
                        üìã
                    </button>
                    <button onclick="qrAdmin.generateQRCode('${table.qr_link}', ${table.table_number})" class="btn btn-outline" title="QR-–∫–æ–¥">
                        üì±
                    </button>
                    <button onclick="qrAdmin.toggleTableStatus(${table.id})" class="btn btn-secondary" title="–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å">
                        ${table.is_active ? '‚è∏Ô∏è' : '‚ñ∂Ô∏è'}
                    </button>
                    <button onclick="qrAdmin.deleteTable(${table.id})" class="btn btn-danger" title="–£–¥–∞–ª–∏—Ç—å">
                        üóëÔ∏è
                    </button>
                </div>
            </div>
        `).join('');
    }

    updateTableStats() {
        const total = this.tables.length;
        const active = this.tables.filter(t => t.is_active).length;
        const withSessions = this.tables.filter(t => t.active_sessions > 0).length;

        document.getElementById('tableStats').textContent =
            `–í—Å–µ–≥–æ: ${total} | –ê–∫—Ç–∏–≤–Ω—ã—Ö: ${active} | –° —Å–µ—Å—Å–∏—è–º–∏: ${withSessions}`;
    }

    filterTables() {
        const searchTerm = document.getElementById('tableSearch').value.toLowerCase();
        const statusFilter = document.getElementById('statusFilter').value;

        let filtered = this.tables;

        if (searchTerm) {
            filtered = filtered.filter(table =>
                table.table_number.toString().includes(searchTerm)
            );
        }

        if (statusFilter) {
            filtered = filtered.filter(table =>
                statusFilter === 'active' ? table.is_active : !table.is_active
            );
        }

        // –í—Ä–µ–º–µ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–∞—Å—Å–∏–≤ –∏ –∑–∞–º–µ–Ω—è–µ–º –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∞
        const originalTables = this.tables;
        this.tables = filtered;
        this.renderTables();
        this.tables = originalTables;
    }

    async toggleTableStatus(tableId) {
        try {
            const response = await fetch('../api/tables.php', {
                method: 'PUT',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    action: 'toggle_status',
                    table_id: tableId
                })
            });

            const result = await response.json();

            if (result.success) {
                this.showMessage(result.message, 'success');
                this.loadTables();
            } else {
                this.showMessage(result.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞', 'error');
            }
        } catch (error) {
            this.showMessage('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ' + error.message, 'error');
        }
    }

    async deleteTable(tableId) {
        if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Å—Ç–æ–ª–∏–∫? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.')) {
            return;
        }

        try {
            console.log('–£–¥–∞–ª—è–µ–º —Å—Ç–æ–ª–∏–∫ —Å ID:', tableId);

            const response = await fetch('../api/tables.php', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    action: 'delete_single',
                    table_id: tableId
                })
            });

            console.log('Response status:', response.status);
            console.log('Response headers:', response.headers);

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            const result = await response.json();
            console.log('Delete result:', result);

            if (result.success) {
                this.showMessage(result.message, 'success');
                this.loadTables();
            } else {
                this.showMessage(result.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–æ–ª–∏–∫–∞', 'error');
            }
        } catch (error) {
            console.error('Delete error:', error);
            this.showMessage('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ' + error.message, 'error');
        }
    }

    async deleteAllTables() {
        if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –í–°–ï —Å—Ç–æ–ª–∏–∫–∏? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!')) {
            return;
        }

        try {
            console.log('–£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—Ç–æ–ª–∏–∫–∏');

            const response = await fetch('../api/tables.php', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ action: 'delete_all' })
            });

            console.log('Delete all response status:', response.status);

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            const result = await response.json();
            console.log('Delete all result:', result);

            if (result.success) {
                this.showMessage(result.message, 'success');
                this.loadTables();
            } else {
                this.showMessage(result.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–æ–ª–∏–∫–æ–≤', 'error');
            }
        } catch (error) {
            console.error('Delete all error:', error);
            this.showMessage('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ' + error.message, 'error');
        }
    }

    copyTableLink(link) {
        navigator.clipboard.writeText(link).then(() => {
            this.showMessage('–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞', 'success');
        }).catch(() => {
            // Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
            const textArea = document.createElement('textarea');
            textArea.value = link;
            document.body.appendChild(textArea);
            textArea.select();
            document.execCommand('copy');
            document.body.removeChild(textArea);
            this.showMessage('–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞', 'success');
        });
    }

    generateQRCode(link, tableNumber) {
        // –û—Ç–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ —Å QR-–∫–æ–¥–æ–º (–∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–Ω–µ—à–Ω–∏–π —Å–µ—Ä–≤–∏—Å)
        const qrUrl = `https://api.qrserver.com/v1/create-qr-code/?size=300x300&data=${encodeURIComponent(link)}`;
        const newWindow = window.open('', '_blank', 'width=400,height=450');
        newWindow.document.write(`
            <html>
                <head><title>QR-–∫–æ–¥ –¥–ª—è —Å—Ç–æ–ª–∏–∫–∞ #${tableNumber}</title></head>
                <body style="text-align: center; padding: 20px; font-family: Arial;">
                    <h2>QR-–∫–æ–¥ –¥–ª—è —Å—Ç–æ–ª–∏–∫–∞ #${tableNumber}</h2>
                    <img src="${qrUrl}" alt="QR Code" style="border: 1px solid #ddd;">
                    <p style="font-size: 12px; color: #666; word-break: break-all;">${link}</p>
                    <button onclick="window.print()" style="padding: 10px 20px; margin: 10px;">–ü–µ—á–∞—Ç—å</button>
                    <button onclick="window.close()" style="padding: 10px 20px; margin: 10px;">–ó–∞–∫—Ä—ã—Ç—å</button>
                </body>
            </html>
        `);
    }

    async loadNotifications() {
        try {
            const response = await fetch('../api/notifications.php?action=list&limit=20');
            const result = await response.json();

            if (result.success) {
                this.notifications = result.data;
                this.renderNotifications();
            }
        } catch (error) {
            console.error('Error loading notifications:', error);
        }
    }

    renderNotifications() {
        const container = document.getElementById('notificationsContainer');

        if (this.notifications.length === 0) {
            container.innerHTML = '<div class="empty-state">–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç</div>';
            return;
        }

        container.innerHTML = this.notifications.map(notification => `
            <div class="notification-item ${notification.is_read ? '' : 'unread'}">
                <div class="notification-header">
                    <span class="notification-type">
                        ${notification.type_display} - –°—Ç–æ–ª–∏–∫ #${notification.table_number}
                    </span>
                    <span class="notification-time">
                        ${new Date(notification.created_at).toLocaleString('ru')}
                    </span>
                </div>
                ${notification.message ? `<div class="notification-message">${notification.message}</div>` : ''}
                ${!notification.is_read ? `
                    <button onclick="qrAdmin.markNotificationRead(${notification.id})"
                            class="btn btn-sm btn-outline" style="margin-top: 8px;">
                        ‚úì –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
                    </button>
                ` : ''}
            </div>
        `).join('');
    }

    async markNotificationRead(notificationId) {
        try {
            const response = await fetch('../api/notifications.php', {
                method: 'PUT',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    action: 'mark_read',
                    notification_id: notificationId
                })
            });

            const result = await response.json();

            if (result.success) {
                this.loadNotifications();
            }
        } catch (error) {
            console.error('Error marking notification as read:', error);
        }
    }

    async markAllNotificationsRead() {
        try {
            const response = await fetch('../api/notifications.php', {
                method: 'PUT',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ action: 'mark_all_read' })
            });

            const result = await response.json();

            if (result.success) {
                this.showMessage(result.message, 'success');
                this.loadNotifications();
            }
        } catch (error) {
            this.showMessage('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π', 'error');
        }
    }

    async clearOldNotifications() {
        if (!confirm('–£–¥–∞–ª–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π?')) return;

        try {
            const response = await fetch('../api/notifications.php', {
                method: 'DELETE',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    action: 'old',
                    days: 7
                })
            });

            const result = await response.json();

            if (result.success) {
                this.showMessage(result.message, 'success');
                this.loadNotifications();
            }
        } catch (error) {
            this.showMessage('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π', 'error');
        }
    }

    startNotificationPolling() {
        // –û–±–Ω–æ–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
        setInterval(() => {
            this.loadNotifications();
        }, 30000);
    }

    showMessage(message, type = 'info') {
        const statusDiv = document.getElementById('statusMessage');
        if (statusDiv) {
            statusDiv.textContent = message;
            statusDiv.className = `status-message ${type}`;
            statusDiv.style.display = 'block';

            setTimeout(() => {
                statusDiv.style.display = 'none';
            }, 5000);
        }
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ HTML
