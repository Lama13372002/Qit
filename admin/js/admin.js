class AdminPanel {
    constructor() {
        this.workingHours = null;
        this.init();
    }

    async init() {
        await this.loadData();
        this.renderDays();
        this.renderPreview();
        this.bindEvents();
        this.bindSocialLinksEvents();
    }

    async loadData() {
        try {
            // –í–°–ï–ì–î–ê –∑–∞–≥—Ä—É–∂–∞–µ–º —Å —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —É–ª—É—á—à–µ–Ω–∏—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            const timestamp = Date.now();
            const response = await fetch(`../data/working-hours.json?v=${timestamp}&_cache=no`, {
                method: 'GET',
                headers: {
                    'Cache-Control': 'no-cache, no-store, must-revalidate',
                    'Pragma': 'no-cache',
                    'Expires': '0'
                },
                cache: 'no-cache',
                mode: 'cors',
                credentials: 'same-origin'
            });

            if (!response.ok) {
                throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: ${response.status}`);
            }
            this.workingHours = await response.json();

            // –ó–∞–ø–æ–ª–Ω—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            document.getElementById('title').value = this.workingHours.title;

            // –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
            this.loadSocialLinks();

            console.log('üì° –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —Å —Å–µ—Ä–≤–µ—Ä–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å');
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);

            // –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ localStorage –∫–∞–∫ fallback
            const localData = localStorage.getItem('workingHoursData');
            if (localData) {
                this.workingHours = JSON.parse(localData);
                document.getElementById('title').value = this.workingHours.title;
                this.loadSocialLinks(); // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
                console.log('‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ localStorage (—Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)');
                this.showMessage('–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –∫—ç—à–∞ (—Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)', 'warning');
                return;
            }

            // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            this.workingHours = this.getDefaultData();
            document.getElementById('title').value = this.workingHours.title;
            this.loadSocialLinks(); // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
        }
    }

    getDefaultData() {
        return {
            title: "Working Hours",
            days: [
                { name: "Monday", nameRu: "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", time: "11:00 ‚Äî 22:00", status: "green" },
                { name: "Tuesday", nameRu: "–í—Ç–æ—Ä–Ω–∏–∫", time: "11:00 ‚Äî 22:00", status: "green" },
                { name: "Wednesday", nameRu: "–°—Ä–µ–¥–∞", time: "11:00 ‚Äî 22:00", status: "green" },
                { name: "Thursday", nameRu: "–ß–µ—Ç–≤–µ—Ä–≥", time: "11:00 ‚Äî 22:00", status: "green" },
                { name: "Friday", nameRu: "–ü—è—Ç–Ω–∏—Ü–∞", time: "11:00 ‚Äî 23:00", status: "green" },
                { name: "Saturday", nameRu: "–°—É–±–±–æ—Ç–∞", time: "11:00 ‚Äî 23:00", status: "green" },
                { name: "Sunday", nameRu: "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ", time: "12:00 ‚Äî 21:00", status: "yellow" }
            ],
            social_links: {
                instagram: "",
                facebook: "",
                twitter: ""
            }
        };
    }

    renderDays() {
        const container = document.getElementById('daysContainer');
        container.innerHTML = '';

        this.workingHours.days.forEach((day, index) => {
            const dayElement = this.createDayElement(day, index);
            container.appendChild(dayElement);
        });
    }

    createDayElement(day, index) {
        const dayDiv = document.createElement('div');
        dayDiv.className = 'day-item';
        dayDiv.innerHTML = `
            <div class="day-header">
                <span class="day-name">${day.nameRu} (${day.name})</span>
                <div class="status-indicator status-${day.status}"></div>
            </div>
            <div class="day-controls">
                <div class="form-group">
                    <label>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</label>
                    <input type="text"
                           class="form-control time-input"
                           value="${day.time}"
                           data-day-index="${index}"
                           placeholder="11:00 ‚Äî 22:00">
                </div>
                <div class="form-group">
                    <label>–°—Ç–∞—Ç—É—Å:</label>
                    <div class="status-buttons">
                        <button class="status-btn green ${day.status === 'green' ? 'active' : ''}"
                                data-day-index="${index}"
                                data-status="green">–û—Ç–∫—Ä—ã—Ç–æ</button>
                        <button class="status-btn yellow ${day.status === 'yellow' ? 'active' : ''}"
                                data-day-index="${index}"
                                data-status="yellow">–û–≥—Ä–∞–Ω–∏—á–µ–Ω–æ</button>
                        <button class="status-btn red ${day.status === 'red' ? 'active' : ''}"
                                data-day-index="${index}"
                                data-status="red">–ó–∞–∫—Ä—ã—Ç–æ</button>
                    </div>
                </div>
            </div>
        `;

        return dayDiv;
    }

    renderPreview() {
        const container = document.getElementById('previewContent');
        const title = document.getElementById('title').value;

        let previewHTML = `<div class="preview-title">${title}</div>`;

        this.workingHours.days.forEach(day => {
            previewHTML += `
                <div class="preview-day">
                    <span class="preview-day-name">${day.name}</span>
                    <div class="preview-time-status">
                        <span class="preview-time">${day.time}</span>
                        <span class="preview-status status-${day.status}"></span>
                    </div>
                </div>
            `;
        });

        container.innerHTML = previewHTML;
    }

    bindEvents() {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
        document.getElementById('title').addEventListener('input', (e) => {
            this.workingHours.title = e.target.value;
            this.renderPreview();
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã
        document.addEventListener('input', (e) => {
            if (e.target.classList.contains('time-input')) {
                const dayIndex = parseInt(e.target.dataset.dayIndex);
                this.workingHours.days[dayIndex].time = e.target.value;
                this.renderPreview();
            }
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Å—Ç–∞—Ç—É—Å–∞
        document.addEventListener('click', (e) => {
            if (e.target.classList.contains('status-btn')) {
                const dayIndex = parseInt(e.target.dataset.dayIndex);
                const status = e.target.dataset.status;

                this.updateDayStatus(dayIndex, status);
                this.renderPreview();
            }
        });
    }

    updateDayStatus(dayIndex, status) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        this.workingHours.days[dayIndex].status = status;

        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        const dayItem = document.querySelectorAll('.day-item')[dayIndex];
        const statusButtons = dayItem.querySelectorAll('.status-btn');
        const statusIndicator = dayItem.querySelector('.status-indicator');

        statusButtons.forEach(btn => btn.classList.remove('active'));
        statusButtons.forEach(btn => {
            if (btn.dataset.status === status) {
                btn.classList.add('active');
            }
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç–∞—Ç—É—Å–∞
        statusIndicator.className = `status-indicator status-${status}`;
    }

    async saveData() {
        try {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
            const saveBtn = document.getElementById('saveBtn');
            saveBtn.textContent = '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...';
            saveBtn.disabled = true;

            let serverSaved = false;
            let errorMessage = '';

            // –ü–†–ò–û–†–ò–¢–ï–¢: –ø—ã—Ç–∞–µ–º—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            try {
                const response = await fetch('save-data.php', {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                        'Cache-Control': 'no-cache',
                        'Connection': 'close'  // –ü—Ä–∏–Ω—É–∂–¥–∞–µ—Ç HTTP/1.1
                    },
                    body: JSON.stringify(this.workingHours, null, 2),
                    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                    cache: 'no-cache',
                    mode: 'cors',
                    credentials: 'same-origin'
                });

                if (response.ok) {
                    const result = await response.json();
                    serverSaved = true;
                    console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:', result);
                } else {
                    const errorData = await response.text();
                    errorMessage = `–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${response.status}`;
                    console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:', errorData);
                }
            } catch (error) {
                errorMessage = '–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º';
                console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error);

                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Å –¥—Ä—É–≥–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
                try {
                    console.log('üîÑ –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å...');
                    const retryResponse = await fetch('save-data.php', {
                        method: 'POST', // –ü—Ä–æ–±—É–µ–º POST –≤–º–µ—Å—Ç–æ PUT
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(this.workingHours, null, 2)
                    });

                    if (retryResponse.ok) {
                        const result = await retryResponse.json();
                        serverSaved = true;
                        console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ (–ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞):', result);
                    }
                } catch (retryError) {
                    console.log('‚ùå –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å:', retryError);
                }
            }

            if (serverSaved) {
                // –ï—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ, —Ç–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage –∫–∞–∫ –∫—ç—à
                localStorage.setItem('workingHoursData', JSON.stringify(this.workingHours));
                this.updateMainPageData();
                this.showMessage('‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ!', 'success');
            } else {
                // –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ –∫–∞–∫ —Ä–µ–∑–µ—Ä–≤
                localStorage.setItem('workingHoursData', JSON.stringify(this.workingHours));
                this.updateMainPageData();
                this.downloadJSON(); // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª –¥–ª—è —Ä—É—á–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏
                this.showMessage(`‚ö†Ô∏è ${errorMessage}. –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω–æ –∏ —Ñ–∞–π–ª —Å–∫–∞—á–∞–Ω –¥–ª—è —Ä—É—á–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏.`, 'warning');
            }

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);

            // –í –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ö–æ—Ç—è –±—ã –ª–æ–∫–∞–ª—å–Ω–æ
            localStorage.setItem('workingHoursData', JSON.stringify(this.workingHours));
            this.updateMainPageData();
            this.downloadJSON();
            this.showMessage('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è. –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω–æ.', 'error');
        } finally {
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
            const saveBtn = document.getElementById('saveBtn');
            saveBtn.textContent = '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è';
            saveBtn.disabled = false;
        }
    }

    updateMainPageData() {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        if (window.opener && !window.opener.closed) {
            // –ï—Å–ª–∏ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –æ—Ç–∫—Ä—ã—Ç–∞ –≤ –Ω–æ–≤–æ–º –æ–∫–Ω–µ
            window.opener.postMessage({
                type: 'workingHoursUpdate',
                data: this.workingHours
            }, '*');
        }

        // –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage –¥–ª—è –¥—Ä—É–≥–∏—Ö –≤–∫–ª–∞–¥–æ–∫
        window.dispatchEvent(new StorageEvent('storage', {
            key: 'workingHoursData',
            newValue: JSON.stringify(this.workingHours)
        }));

        console.log('üîÑ –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É');
    }

    downloadJSON() {
        // –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        const dataStr = JSON.stringify(this.workingHours, null, 2);
        const dataUri = 'data:application/json;charset=utf-8,'+ encodeURIComponent(dataStr);

        const exportFileDefaultName = 'working-hours.json';

        const linkElement = document.createElement('a');
        linkElement.setAttribute('href', dataUri);
        linkElement.setAttribute('download', exportFileDefaultName);
        linkElement.click();

        console.log('üìÅ –§–∞–π–ª working-hours.json —Å–∫–∞—á–∞–Ω');
    }

    showMessage(text, type) {
        const messageElement = document.getElementById('statusMessage');
        messageElement.textContent = text;
        messageElement.className = `status-message ${type}`;

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        setTimeout(() => {
            messageElement.classList.add('show');
        }, 100);

        // –°–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
            messageElement.classList.remove('show');
        }, 5000);
    }

    loadSocialLinks() {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç social_links –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if (!this.workingHours.social_links) {
            this.workingHours.social_links = {
                instagram: "",
                facebook: "",
                twitter: ""
            };
        }

        // –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è —Ñ–æ—Ä–º—ã
        const instagramField = document.getElementById('instagramLink');
        const facebookField = document.getElementById('facebookLink');
        const twitterField = document.getElementById('twitterLink');

        if (instagramField) {
            instagramField.value = this.workingHours.social_links.instagram || '';
        }
        if (facebookField) {
            facebookField.value = this.workingHours.social_links.facebook || '';
        }
        if (twitterField) {
            twitterField.value = this.workingHours.social_links.twitter || '';
        }

        console.log('üì± –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ —Ñ–æ—Ä–º—É');
    }

    bindSocialLinksEvents() {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–ª–µ–π —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
        const instagramField = document.getElementById('instagramLink');
        const facebookField = document.getElementById('facebookLink');
        const twitterField = document.getElementById('twitterLink');

        if (instagramField) {
            instagramField.addEventListener('input', (e) => {
                if (!this.workingHours.social_links) {
                    this.workingHours.social_links = {};
                }
                this.workingHours.social_links.instagram = e.target.value;
                console.log('Instagram —Å—Å—ã–ª–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞:', e.target.value);
            });
        }

        if (facebookField) {
            facebookField.addEventListener('input', (e) => {
                if (!this.workingHours.social_links) {
                    this.workingHours.social_links = {};
                }
                this.workingHours.social_links.facebook = e.target.value;
                console.log('Facebook —Å—Å—ã–ª–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞:', e.target.value);
            });
        }

        if (twitterField) {
            twitterField.addEventListener('input', (e) => {
                if (!this.workingHours.social_links) {
                    this.workingHours.social_links = {};
                }
                this.workingHours.social_links.twitter = e.target.value;
                console.log('Twitter —Å—Å—ã–ª–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞:', e.target.value);
            });
        }
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
    window.adminPanel = new AdminPanel();
});

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
function validateTime(timeString) {
    const timeRegex = /^\d{1,2}:\d{2}\s*‚Äî\s*\d{1,2}:\d{2}$/;
    return timeRegex.test(timeString);
}

function formatTime(timeString) {
    return timeString.replace(/\s+/g, ' ').replace(/\s*‚Äî\s*/, ' ‚Äî ');
}
