/**
 * –ù–µ–∑–∞–≤–∏—Å–∏–º—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫ –º–µ–Ω—é
 * –ü–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–º–µ–Ω—è–µ—Ç —Å—Ç–∞—Ä—É—é —Å–∏—Å—Ç–µ–º—É –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é
 */
class MenuCards {
    constructor() {
        this.menuData = null;
        this.initialized = false;
        this.currentLang = document.documentElement.lang || 'en'; // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        console.log(`üçΩÔ∏è MenuCards: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è... –Ø–∑—ã–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: ${this.currentLang}`);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ –∫–∞—Ä—É—Å–µ–ª–∏
        window.menuCardsInstance = this;

        this.init();
    }

    async init() {
        try {
            console.log('üìã MenuCards: –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é');
            await this.loadMenuData();
            this.renderMenu();
            this.setupUpdateListeners();
            this.initialized = true;
            console.log('‚úÖ MenuCards: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
        } catch (error) {
            console.error('‚ùå MenuCards: –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
            this.renderErrorMessage();
        }
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
    getLocalizedValue(field, defaultKey = 'en') {
        if (typeof field === 'object' && field !== null) {
            return field[this.currentLang] || field[defaultKey] || '';
        }
        // –ï—Å–ª–∏ field - —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–ª–∏ –Ω–µ—Ç –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏), –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–µ
        return (typeof field === 'string') ? field : '';
    }

    async loadMenuData() {
        try {
            const timestamp = Date.now();
            const response = await fetch(`../data/menu-data.json?t=${timestamp}&r=${Math.random()}`, {
                method: 'GET',
                headers: {
                    'Cache-Control': 'no-cache, no-store, must-revalidate',
                    'Pragma': 'no-cache',
                    'Expires': '0'
                },
                cache: 'no-cache'
            });

            if (response.ok) {
                const data = await response.json();
                this.menuData = data;
                console.log('üì° MenuCards: –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —Å —Å–µ—Ä–≤–µ—Ä–∞', data);
                localStorage.setItem('menuData', JSON.stringify(data));
                return;
            }
             throw new Error(`Server responded with status: ${response.status}`);
        } catch (error) {
            console.warn('‚ö†Ô∏è MenuCards: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞:', error.message);
        }

        try {
            const localData = localStorage.getItem('menuData');
            if (localData) {
                this.menuData = JSON.parse(localData);
                console.log('üíæ MenuCards: –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ localStorage');
                return;
            }
        } catch (error) {
            console.warn('‚ö†Ô∏è MenuCards: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ localStorage:', error.message);
        }

        this.menuData = this.getDefaultMenuData();
        console.log('üîÑ MenuCards: –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
    }

    getDefaultMenuData() {
        // –î–∞–Ω–Ω—ã–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–µ–ø–µ—Ä—å —Ç–∞–∫–∂–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        return {
            pageTitle: { en: "Menu", ru: "–ú–µ–Ω—é" },
            hero: {
                title: { en: "Our Exquisite Menu", ru: "–ù–∞—à–µ –ò–∑—ã—Å–∫–∞–Ω–Ω–æ–µ –ú–µ–Ω—é" },
                backgroundImage: ""
            },
            categories: [
                {
                    id: "maki",
                    name: { en: "Maki Rolls", ru: "–†–æ–ª–ª—ã –ú–∞–∫–∏" },
                    spicy: false, // –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ñ–ª–∞–≥ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                    items: [
                        {
                            id: "spicy-tuna-maki",
                            name: { en: "Spicy Tuna Maki", ru: "–û—Å—Ç—Ä—ã–µ –ú–∞–∫–∏ —Å –¢—É–Ω—Ü–æ–º" },
                            price: "$5",
                            description: {
                                en: "A tantalizing blend of spicy tuna, cucumber, and avocado, harmoniously rolled in nori and seasoned rice.",
                                ru: "–°–æ–±–ª–∞–∑–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ—á–µ—Ç–∞–Ω–∏–µ –æ—Å—Ç—Ä–æ–≥–æ —Ç—É–Ω—Ü–∞, –æ–≥—É—Ä—Ü–∞ –∏ –∞–≤–æ–∫–∞–¥–æ, –≥–∞—Ä–º–æ–Ω–∏—á–Ω–æ –∑–∞–≤–µ—Ä–Ω—É—Ç–æ–µ –≤ –Ω–æ—Ä–∏ –∏ –ø—Ä–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ä–∏—Å."
                            },
                            image: "https://via.placeholder.com/300x200?text=Spicy+Tuna+Maki",
                            spicy: true // –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ñ–ª–∞–≥ –¥–ª—è –±–ª—é–¥–∞
                        },
                        {
                            id: "salmon-maki",
                            name: { en: "Salmon Maki", ru: "–ú–∞–∫–∏ —Å –õ–æ—Å–æ—Å–µ–º" },
                            price: "$5",
                            description: {
                                en: "Fresh salmon wrapped in perfectly seasoned rice and nori seaweed.",
                                ru: "–°–≤–µ–∂–∏–π –ª–æ—Å–æ—Å—å, –∑–∞–≤–µ—Ä–Ω—É—Ç—ã–π –≤ –∏–¥–µ–∞–ª—å–Ω–æ –ø—Ä–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ä–∏—Å –∏ –≤–æ–¥–æ—Ä–æ—Å–ª–∏ –Ω–æ—Ä–∏."
                            },
                            image: "https://via.placeholder.com/300x200?text=Salmon+Maki",
                            spicy: false
                        }
                    ]
                },
                {
                    id: "uramaki",
                    name: { en: "Uramaki (Inside-Out)", ru: "–£—Ä–∞–º–∞–∫–∏ (–ù–∞–∏–∑–Ω–∞–Ω–∫—É)"},
                    spicy: true,
                    items: [
                        {
                            id: "volcano-delight",
                            name: { en: "Volcano Delight", ru: "–í—É–ª–∫–∞–Ω–∏—á–µ—Å–∫–æ–µ –ù–∞—Å–ª–∞–∂–¥–µ–Ω–∏–µ" },
                            price: "$12",
                            description: {
                                en: "Creamy crab salad, avocado, and cucumber rolled inside, topped with spicy tuna and drizzled with fiery sriracha sauce.",
                                ru: "–ö—Ä–µ–º–æ–≤—ã–π –∫—Ä–∞–±–æ–≤—ã–π —Å–∞–ª–∞—Ç, –∞–≤–æ–∫–∞–¥–æ –∏ –æ–≥—É—Ä–µ—Ü –≤–Ω—É—Ç—Ä–∏, —Å–≤–µ—Ä—Ö—É –æ—Å—Ç—Ä—ã–π —Ç—É–Ω–µ—Ü –∏ –æ–≥–Ω–µ–Ω–Ω—ã–π —Å–æ—É—Å —à—Ä–∏—Ä–∞—á–∞."
                            },
                            image: "https://via.placeholder.com/300x200?text=Volcano+Delight",
                            spicy: true
                        }
                    ]
                }
            ]
        };
    }

    renderMenu() {
        const container = this.findMenuContainer();
        if (!container) {
            console.error('‚ùå MenuCards: –ù–µ –Ω–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –º–µ–Ω—é');
            return;
        }
        container.innerHTML = '';

        if (!this.menuData || !this.menuData.categories || this.menuData.categories.length === 0) {
            this.renderEmptyState(container);
            return;
        }
        console.log(`üîÑ MenuCards: –†–µ–Ω–¥–µ—Ä–∏–º ${this.menuData.categories.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–∞ —è–∑—ã–∫–µ '${this.currentLang}'`);
        this.menuData.categories.forEach((category, index) => {
            const categoryElement = this.createCategoryElement(category, index);
            container.appendChild(categoryElement);
        });
        console.log('‚úÖ MenuCards: –ú–µ–Ω—é –æ—Ç—Ä–µ–Ω–¥–µ—Ä–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
        this.notifyCarousel();
        this.applyStyleFixes(container);
    }

    findMenuContainer() {
        const selectors = ['#dynamic-menu-container', '.dynamic-menu-content', '.framer-i421fq', '.menu-content', 'main .framer-i421fq'];
        for (const selector of selectors) {
            const container = document.querySelector(selector);
            if (container) {
                console.log(`üìç MenuCards: –ù–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä: ${selector}`);
                container.style.width = '100%';
                container.style.maxWidth = '1200px';
                container.style.margin = '0 auto';
                container.style.padding = '0 1rem';
                return container;
            }
        }
        console.warn('üìç MenuCards: –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –º–µ–Ω—é –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π.');
        const newContainer = document.createElement('div');
        newContainer.id = 'menu-cards-container-fallback';
        newContainer.className = 'menu-cards-container';
        newContainer.style.cssText = `width: 100%; max-width: 1200px; margin: 20px auto; padding: 0 1rem;`;
        const mainContentArea = document.querySelector('main') || document.body;
        mainContentArea.appendChild(newContainer);
        return newContainer;
    }

    createCategoryElement(category, categoryIndex) {
        const categoryName = this.getLocalizedValue(category.name);
        console.log(`üè∑Ô∏è MenuCards: –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é "${categoryName}" (ID: ${category.id})`);

        const categoryDiv = document.createElement('div');
        categoryDiv.className = 'framer-cr81gk menu-category';
        categoryDiv.id = category.id || `category-${categoryIndex}`;

        const headerHTML = `
            <div class="framer-ctytay">
                <div class="framer-14yj1y1">
                    <div class="framer-ip9mw5" data-border="true" data-framer-name="Icon" style="transform:rotate(-45deg); background-color: var(--token-68c05b50-ca7b-4173-82aa-ed42aea1a9b4, rgb(232, 232, 232)); width: 8px; height: 8px; border: 1px solid var(--token-68c05b50-ca7b-4173-82aa-ed42aea1a9b4, rgb(232, 232, 232));"></div>
                    <div class="framer-bnmzg6" data-framer-name="Line" style="background-color: var(--token-68c05b50-ca7b-4173-82aa-ed42aea1a9b4, rgb(232, 232, 232)); height: 1px; flex: 1;"></div>
                </div>
                <div class="framer-om33u4" data-framer-component-type="RichTextContainer" style="outline:none;display:flex;flex-direction:column;justify-content:flex-start;flex-shrink:0;transform:none; margin: 0 1rem;">
                    <h2 class="framer-text framer-styles-preset-12lj5ox" data-styles-preset="YckFIlg3V" style="color: var(--token-b0d5b115-8d5e-4849-a7e4-d3bb5b253c70, rgb(239, 230, 210)); font-size: 2rem; font-weight: 600; margin: 0;">${categoryName}${category.spicy ? ' üå∂Ô∏è' : ''}</h2>
                </div>
                <div class="framer-1h4if96">
                    <div class="framer-194wd46" data-framer-name="Line" style="background-color: var(--token-68c05b50-ca7b-4173-82aa-ed42aea1a9b4, rgb(232, 232, 232)); height: 1px; flex: 1;"></div>
                    <div class="framer-pxgvsy" data-border="true" data-framer-name="Icon" style="transform:rotate(-45deg); background-color: var(--token-68c05b50-ca7b-4173-82aa-ed42aea1a9b4, rgb(232, 232, 232)); width: 8px; height: 8px; border: 1px solid var(--token-68c05b50-ca7b-4173-82aa-ed42aea1a9b4, rgb(232, 232, 232));"></div>
                </div>
            </div>
        `;
        categoryDiv.innerHTML = headerHTML;

        const itemsContainer = document.createElement('div');
        itemsContainer.className = 'framer-18w9xn4 menu-items-container';
        itemsContainer.style.cssText = `display: flex; flex-direction: column; gap: 1rem; margin-top: 2rem;`;

        if (category.items && category.items.length > 0) {
            category.items.forEach((item, itemIndex) => {
                const itemElement = this.createItemElement(item, itemIndex);
                itemsContainer.appendChild(itemElement);
            });
        } else {
            const emptyMessage = document.createElement('div');
            emptyMessage.style.cssText = `padding: 2rem; text-align: center; color: var(--token-797a2fb4-2d14-46eb-9fb6-f38c1a9a545e, rgb(245, 242, 234)); opacity: 0.7;`;
            emptyMessage.textContent = this.currentLang === 'ru' ? '–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç –±–ª—é–¥' : 'No items in this category yet';
            itemsContainer.appendChild(emptyMessage);
        }
        categoryDiv.appendChild(itemsContainer);
        categoryDiv.style.marginBottom = '3rem';
        return categoryDiv;
    }

    createItemElement(item, itemIndex) {
        const itemName = this.getLocalizedValue(item.name);
        const itemDescription = this.getLocalizedValue(item.description);
        console.log(`üç± MenuCards: –°–æ–∑–¥–∞–µ–º –±–ª—é–¥–æ "${itemName}"`);

        const itemDiv = document.createElement('div');
        itemDiv.className = 'ssr-variant hidden-1td9vov hidden-okrmbe menu-item-card';

        const itemContainer = document.createElement('div');
        itemContainer.className = 'framer-rto2k8-container modern-card-container';
        itemContainer.innerHTML = `
            <div class="modern-menu-card" data-framer-name="Desktop" style="width: 100%; opacity: 1;">
                <div class="card-image-container">
                    <div class="card-image-wrapper">
                        <img alt="${itemName}"
                             decoding="async"
                             src="${item.image || 'https://via.placeholder.com/300x200?text=No+Image'}"
                             class="card-image"
                             onerror="this.onerror=null; this.src='https://via.placeholder.com/300x200?text=Image+Error';"/>
                        ${item.spicy ? '<div class="spicy-badge">üå∂Ô∏è</div>' : ''}
                    </div>
                </div>
                <div class="card-content">
                    <div class="card-header">
                        <h3 class="item-name">${itemName}</h3>
                        <div class="price-tag">${item.price}</div>
                    </div>
                    <p class="item-description">${itemDescription}</p>
                    <div class="card-footer">
                        <div class="card-divider"></div>
                    </div>
                </div>
            </div>
        `;
        itemDiv.appendChild(itemContainer);

        itemDiv.classList.add('loading');
        setTimeout(() => {
            itemDiv.classList.remove('loading');
            itemDiv.classList.add('loaded');
        }, 100 + itemIndex * 50);

        itemDiv.addEventListener('mouseenter', () => {
            const card = itemContainer.querySelector('.modern-menu-card');
            if (card) {
                card.style.transform = 'translateY(-5px)';
                card.style.boxShadow = '0 15px 35px rgba(0,0,0,0.3)';
            }
        });
        itemDiv.addEventListener('mouseleave', () => {
            const card = itemContainer.querySelector('.modern-menu-card');
            if (card) {
                card.style.transform = 'translateY(0)';
                card.style.boxShadow = '0 8px 25px rgba(0,0,0,0.15)';
            }
        });
        return itemDiv;
    }

    renderEmptyState(container) {
        const emptyMessage = this.currentLang === 'ru' ?
            '–ú–µ–Ω—é –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ. –ù–∞—à–∏ –ø–æ–≤–∞—Ä–∞ —É–∂–µ –∫–æ–ª–¥—É—é—Ç –Ω–∞–¥ –Ω–æ–≤—ã–º–∏ –±–ª—é–¥–∞–º–∏! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–π–¥–∏—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –ø–µ—Ä—Å–æ–Ω–∞–ª—É.' :
            'The menu is temporarily unavailable. Our chefs are working on new dishes! Please check back later or ask our staff.';
        const emptyTitle = this.currentLang === 'ru' ? '–ú–µ–Ω—é —Å–∫–æ—Ä–æ –ø–æ—è–≤–∏—Ç—Å—è!' : 'Menu Coming Soon!';
        container.innerHTML = `
            <div class="menu-empty-state" style="padding: 3rem 2rem; text-align: center; background: rgba(24, 24, 24, 0.7); border-radius: 12px; border: 1px solid rgb(51, 51, 48); margin: 2rem 0;">
                <div style="font-size: 3rem; margin-bottom: 1rem;">üçΩÔ∏è</div>
                <h3 style="color: rgb(239, 230, 210); margin-bottom: 1rem;">${emptyTitle}</h3>
                <p style="color: rgb(245, 242, 234); opacity: 0.8; line-height: 1.6;">${emptyMessage}</p>
            </div>`;
    }

    renderErrorMessage() {
        const container = this.findMenuContainer();
        if (!container) return;
        const errorTitle = this.currentLang === 'ru' ? '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é' : 'Error Loading Menu';
        const errorMessageText = this.currentLang === 'ru' ? '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.' : 'An error occurred while loading the menu. Please try refreshing the page.';
        const refreshButtonText = this.currentLang === 'ru' ? '–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É' : 'Refresh Page';
        container.innerHTML = `
            <div class="menu-error-state" style="padding: 3rem 2rem; text-align: center; background: rgba(24, 24, 24, 0.7); border-radius: 12px; border: 2px solid #ff6b6b; margin: 2rem 0;">
                <div style="font-size: 3rem; margin-bottom: 1rem;">‚ö†Ô∏è</div>
                <h3 style="color: #ff6b6b; margin-bottom: 1rem;">${errorTitle}</h3>
                <p style="color: rgb(245, 242, 234); opacity: 0.8; line-height: 1.6; margin-bottom: 1.5rem;">${errorMessageText}</p>
                <button onclick="window.location.reload()" style="background: #ff6b6b; color: white; border: none; padding: 0.75rem 1.5rem; border-radius: 6px; cursor: pointer; font-size: 1rem;">${refreshButtonText}</button>
            </div>`;
    }

    setupUpdateListeners() {
        console.log('üì° MenuCards: –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π');
        window.addEventListener('message', (event) => {
            if (event.data && event.data.type === 'menuDataUpdate' && event.data.source === 'admin-panel') {
                console.log('üîÑ MenuCards: –ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ postMessage –æ—Ç –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏');
                this.handleDataUpdate(event.data.data);
            }
        });
        window.addEventListener('storage', (event) => {
            if (event.key === 'menuData' && event.newValue) {
                console.log('üîÑ MenuCards: –ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ storage');
                try { this.handleDataUpdate(JSON.parse(event.newValue)); } catch (e) { console.error("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ storage", e); }
            }
            if (event.key === 'menuForceReload' && event.newValue === 'true') {
                console.log('üîÑ MenuCards: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑-–∑–∞ —Ñ–ª–∞–≥–∞ menuForceReload');
                setTimeout(() => window.location.reload(), 500);
            }
        });
        window.addEventListener('menuDataForceUpdate', (event) => {
            if (event.detail && event.detail.data) {
                console.log('üîÑ MenuCards: –ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ CustomEvent');
                this.handleDataUpdate(event.detail.data);
            }
        });
        try {
            if (typeof BroadcastChannel !== 'undefined') {
                this.broadcastChannel = new BroadcastChannel('menuUpdates');
                this.broadcastChannel.onmessage = (event) => { // –ò—Å–ø–æ–ª—å–∑—É–µ–º onmessage
                    if (event.data && event.data.type === 'menuDataUpdate') {
                        console.log('üîÑ MenuCards: –ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ BroadcastChannel');
                        this.handleDataUpdate(event.data.data);
                    }
                };
            }
        } catch (error) { console.warn('BroadcastChannel –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –∏–ª–∏ –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error); }

        // –£–±–∏—Ä–∞–µ–º setInterval, –ø–æ–ª–∞–≥–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è –∏ localStorage/BroadcastChannel
        // setInterval(() => this.checkForUpdates(), 30000);
        window.addEventListener('focus', () => this.checkForUpdates(true)); // –ü—Ä–æ–≤–µ—Ä—è—Ç—å –ø—Ä–∏ —Ñ–æ–∫—É—Å–µ, –Ω–æ –º–µ–Ω–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ
    }

    handleDataUpdate(newData) {
        if (!newData) return;
        console.log('üîÑ MenuCards: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö');
        const currentDataStr = JSON.stringify(this.menuData);
        const newDataStr = JSON.stringify(newData);
        if (currentDataStr !== newDataStr) {
            this.menuData = newData;
            localStorage.setItem('menuData', newDataStr); // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∫–µ—à
            this.renderMenu();
            this.showUpdateNotification();
            console.log('‚úÖ MenuCards: –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∏ –º–µ–Ω—é –ø–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä–µ–Ω–æ');
        } else {
            console.log('‚ÑπÔ∏è MenuCards: –î–∞–Ω–Ω—ã–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.');
        }
    }

    async checkForUpdates(isFocusCheck = false) {
        try {
            if (localStorage.getItem('menuForceReload') === 'true') {
                console.log('üîÑ MenuCards: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —á–µ—Ä–µ–∑ checkForUpdates');
                localStorage.removeItem('menuForceReload');
                window.location.reload();
                return;
            }
            // –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ —Ñ–æ–∫—É—Å—É, –Ω–µ –±—É–¥–µ–º —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ –¥–µ—Ä–≥–∞—Ç—å —Å–µ—Ä–≤–µ—Ä
            if (isFocusCheck && this.lastFocusCheck && (Date.now() - this.lastFocusCheck < 10000)) {
                return;
            }
            this.lastFocusCheck = Date.now();

            const timestamp = Date.now();
            const response = await fetch(`../data/menu-data.json?t=${timestamp}&r=${Math.random()}`, {
                cache: 'no-store' // –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º —Å–≤–µ–∂–µ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
            });
            if (response.ok) {
                const newData = await response.json();
                this.handleDataUpdate(newData);
            }
        } catch (error) {
            console.warn('–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è/—Ñ–æ–∫—É—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–µ —É–¥–∞–ª–∞—Å—å:', error.message);
        }
    }

    showUpdateNotification() {
        const notificationId = 'menu-update-notification';
        if (document.getElementById(notificationId)) return; // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å, –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å

        const notification = document.createElement('div');
        notification.id = notificationId;
        notification.style.cssText = `position: fixed; top: 20px; right: 20px; background: linear-gradient(135deg, #22c55e 0%, #16a34a 100%); color: white; padding: 12px 20px; border-radius: 8px; font-size: 14px; font-weight: 500; box-shadow: 0 4px 12px rgba(34, 197, 94, 0.3); z-index: 10000; transform: translateX(110%); transition: transform 0.4s cubic-bezier(0.25, 0.8, 0.25, 1);`;
        notification.textContent = this.currentLang === 'ru' ? 'üçΩÔ∏è –ú–µ–Ω—é –æ–±–Ω–æ–≤–ª–µ–Ω–æ!' : 'üçΩÔ∏è Menu updated!';
        document.body.appendChild(notification);
        setTimeout(() => notification.style.transform = 'translateX(0)', 50);
        setTimeout(() => {
            notification.style.transform = 'translateX(110%)';
            setTimeout(() => notification.remove(), 400);
        }, 3000);
    }

    async forceReload() {
        console.log('üîÑ MenuCards: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—ã–∑–≤–∞–Ω–æ');
        await this.loadMenuData();
        this.renderMenu();
    }

    applyStyleFixes(container) {
        // –°—Ç–∏–ª–∏ —É–∂–µ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –≤ findMenuContainer –∏ create...Element, —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –Ω—É–∂–Ω–∞
        // –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã—Ö –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π.
        console.log('üé® MenuCards: (applyStyleFixes –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π)');
    }

    cleanup() {
        if (this.broadcastChannel) {
            this.broadcastChannel.close();
            console.log('üßπ MenuCards: BroadcastChannel –∑–∞–∫—Ä—ã—Ç');
        }
        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –¥—Ä—É–≥–∏—Ö —Å–ª—É—à–∞—Ç–µ–ª–µ–π, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
    }

    notifyCarousel() {
        if (this.menuData && this.menuData.categories) {
            const categoriesForCarousel = this.menuData.categories.map(cat => ({
                id: cat.id,
                name: this.getLocalizedValue(cat.name) // –õ–æ–∫–∞–ª–∏–∑—É–µ–º –∏–º—è –¥–ª—è –∫–∞—Ä—É—Å–µ–ª–∏
            }));
            const event = new CustomEvent('menuDataUpdated', { detail: { categories: categoriesForCarousel } });
            document.dispatchEvent(event);
            console.log('üîÑ MenuCards: –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞—Ä—É—Å–µ–ª–∏ —Å –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏');
        }
    }
}

document.addEventListener('DOMContentLoaded', () => {
    console.log('üöÄ MenuCards: DOM –∑–∞–≥—Ä—É–∂–µ–Ω, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º...');
    if (!window.menuCardsInstance) { // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
      window.menuCardsInstance = new MenuCards();
    } else {
      console.log('‚ÑπÔ∏è MenuCards: –≠–∫–∑–µ–º–ø–ª—è—Ä —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é.');
    }
});

window.addEventListener('beforeunload', () => {
    if (window.menuCardsInstance) {
        window.menuCardsInstance.cleanup();
    }
});
